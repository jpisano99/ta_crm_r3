In order to load CSV files directly in MySql using the load data local infile command:

    path_to_file = "c:/my_csv.csv"
    sql = "load data local infile '" + path_to_file +\
          "' into table bookings" +\
          " fields terminated by ','" +\
          " enclosed by '\"'" +\
          " escaped by ''" +\
          " lines terminated by '\\r\\n'"
    print(sql)
    db.engine.execute(sql)


Change the MySql SERVER .ini file:
    C:\ProgramData\MySQL\MySQL Server 8.0\my.ini
# Make this change to ALLOW local_infile to work:
    [mysqld]
    local_infile=1

For the CLIENT Side
    set app.config['SQLALCHEMY_DATABASE_URI']
    mysql+mysqlconnector://root:YOURPASSWORD@localhost:3306/test_db?charset=utf8&allow_local_infile=true


Flask SQlAlchemy Examples

    Core
        EXAMPLE
        sql = "SELECT DISTINCT  `date_added` FROM " + sql_name + ";"
        sql_results = db.engine.execute(sql)
        sql_results.rowcount

        EXAMPLE
        db_status = (db.engine.execute("SHOW VARIABLES WHERE Variable_name = 'port'"))
        for x in db_status:
            db_port = x.values()

        EXAMPLE
        db_cmd = tbl_name + ".__table__.create(db.session.bind)"
        exec(db_cmd)
        print('CREATED Table:', tbl_name)

        EXAMPLE Results Proxy Row  to Dict
        sql = "SELECT * FROM " + end_tbl + ";"
        sql_results = db.engine.execute(sql)
        jim = {}
        for r in sql_results:
            jim = dict(r)
            print (jim)
            print(r.erp_end_customer_name, r.product_id, r.web_order_id, r.erp_sales_order_number, r.hash_value)


    ORM